-- SafeZone Supabase Schema
-- Fase 1: Tabel Inti, RLS, Indeks, dan Seed Data

-- 1. EKSTENSI & TIPE ENUM
CREATE EXTENSION IF NOT EXISTS btree_gist; -- Diperlukan untuk indeks GIST pada kolom lat/lng
-- Disarankan untuk mengaktifkan pgcrypto jika belum aktif untuk gen_random_uuid()
-- CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA extensions;

-- Cek jika tipe belum ada sebelum membuatnya untuk mencegah error
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'report_category') THEN
        CREATE TYPE public.report_category AS ENUM ('crime', 'road', 'flood', 'lamp', 'accident', 'other');
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'report_status') THEN
        CREATE TYPE public.report_status AS ENUM ('open', 'verified', 'resolved');
    END IF;
END$$;

-- 2. TABEL

-- Tabel untuk menyimpan data pengguna publik
-- Terhubung dengan auth.users melalui trigger/fungsi nantinya jika diperlukan sinkronisasi
CREATE TABLE IF NOT EXISTS public.profiles (
    id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
    display_name TEXT,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);
COMMENT ON TABLE public.profiles IS 'Stores public profile information for users.';

-- Tabel utama untuk laporan dari komunitas
CREATE TABLE IF NOT EXISTS public.reports (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID REFERENCES public.profiles(id) ON DELETE CASCADE,
    category public.report_category NOT NULL,
    description TEXT NOT NULL,
    lat DOUBLE PRECISION NOT NULL,
    lng DOUBLE PRECISION NOT NULL,
    -- Koordinat akhir untuk laporan berbasis rute (opsional)
    end_lat DOUBLE PRECISION,
    end_lng DOUBLE PRECISION,
    photo_url TEXT,
    status public.report_status NOT NULL DEFAULT 'open',
    created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);
COMMENT ON TABLE public.reports IS 'Community-submitted reports of incidents.';

-- Tabel untuk upvote/downvote laporan
CREATE TABLE IF NOT EXISTS public.votes (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    report_id BIGINT NOT NULL REFERENCES public.reports(id) ON DELETE CASCADE,
    user_id TEXT NOT NULL,
    value INT NOT NULL CHECK (value IN (-1, 1)),
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    UNIQUE (report_id, user_id) -- Pengguna hanya bisa vote sekali per laporan
);
COMMENT ON TABLE public.votes IS 'User votes (upvote/downvote) on reports.';

-- Tabel untuk langganan notifikasi area
CREATE TABLE IF NOT EXISTS public.subscriptions (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
    center_lat DOUBLE PRECISION NOT NULL,
    center_lng DOUBLE PRECISION NOT NULL,
    radius_m INT NOT NULL CHECK (radius_m > 0),
    created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);
COMMENT ON TABLE public.subscriptions IS 'User subscriptions for area-based notifications.';

-- 3. AKTIVASI ROW LEVEL SECURITY (RLS)

ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.reports ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.votes ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.subscriptions ENABLE ROW LEVEL SECURITY;

-- 4. KEBIJAKAN RLS (POLICIES)

-- Kebijakan untuk tabel `profiles`
DROP POLICY IF EXISTS "Users can view their own profile." ON public.profiles;
CREATE POLICY "Users can view their own profile." ON public.profiles FOR SELECT USING (auth.uid() = id);

DROP POLICY IF EXISTS "Users can insert their own profile." ON public.profiles;
CREATE POLICY "Users can insert their own profile." ON public.profiles FOR INSERT WITH CHECK (auth.uid() = id);

DROP POLICY IF EXISTS "Users can update their own profile." ON public.profiles;
CREATE POLICY "Users can update their own profile." ON public.profiles FOR UPDATE USING (auth.uid() = id) WITH CHECK (auth.uid() = id);

DROP POLICY IF EXISTS "Public profiles are viewable by everyone." ON public.profiles;
CREATE POLICY "Public profiles are viewable by everyone." ON public.profiles FOR SELECT USING (true);

-- Kebijakan untuk tabel `reports`
DROP POLICY IF EXISTS "Anyone can view reports." ON public.reports;
CREATE POLICY "Anyone can view reports." ON public.reports FOR SELECT USING (true);

DROP POLICY IF EXISTS "Authenticated users can create reports." ON public.reports;
CREATE POLICY "Authenticated users can create reports." ON public.reports FOR INSERT WITH CHECK (auth.uid() IS NOT NULL AND auth.uid() = user_id);

DROP POLICY IF EXISTS "Users can update their own reports." ON public.reports;
CREATE POLICY "Users can update their own reports." ON public.reports FOR UPDATE USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);

DROP POLICY IF EXISTS "Users can delete their own reports." ON public.reports;
CREATE POLICY "Users can delete their own reports." ON public.reports FOR DELETE USING (auth.uid() = user_id);

-- Kebijakan untuk tabel `votes`
DROP POLICY IF EXISTS "Anyone can view votes." ON public.votes;
CREATE POLICY "Anyone can view votes." ON public.votes FOR SELECT USING (true);

DROP POLICY IF EXISTS "Authenticated users can create votes." ON public.votes;
CREATE POLICY "Authenticated users can create votes." ON public.votes FOR INSERT WITH CHECK (auth.uid() IS NOT NULL);

DROP POLICY IF EXISTS "Users can update their own votes." ON public.votes;
CREATE POLICY "Users can update their own votes." ON public.votes FOR UPDATE USING (auth.uid()::text = user_id) WITH CHECK (auth.uid()::text = user_id);

DROP POLICY IF EXISTS "Users can delete their own votes." ON public.votes;
CREATE POLICY "Users can delete their own votes." ON public.votes FOR DELETE USING (auth.uid()::text = user_id);

-- Kebijakan untuk tabel `subscriptions`
DROP POLICY IF EXISTS "Users can manage their own subscriptions." ON public.subscriptions;
CREATE POLICY "Users can manage their own subscriptions." ON public.subscriptions FOR ALL USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);

-- 5. INDEKS UNTUK PERFORMA

-- Indeks untuk query geospasial pada laporan
CREATE INDEX IF NOT EXISTS idx_reports_geo ON public.reports USING gist (lat, lng); -- GIST lebih cocok untuk geo
CREATE INDEX IF NOT EXISTS idx_reports_end_geo ON public.reports USING gist (end_lat, end_lng); -- GIST untuk koordinat akhir

-- Indeks untuk query geospasial pada langganan
CREATE INDEX IF NOT EXISTS idx_subscriptions_geo ON public.subscriptions USING gist (center_lat, center_lng); -- GIST lebih cocok untuk geo

-- Indeks untuk memfilter laporan berdasarkan kategori dan status
CREATE INDEX IF NOT EXISTS idx_reports_category_status ON public.reports (category, status);

-- Indeks pada foreign key untuk join yang lebih cepat
CREATE INDEX IF NOT EXISTS idx_reports_user_id ON public.reports (user_id);
CREATE INDEX IF NOT EXISTS idx_votes_report_id ON public.votes (report_id);
CREATE INDEX IF NOT EXISTS idx_votes_user_id ON public.votes (user_id);
CREATE INDEX IF NOT EXISTS idx_subscriptions_user_id ON public.subscriptions (user_id);

-- 6. VIEW UNTUK REKAPITULASI

CREATE OR REPLACE VIEW public.report_summary AS
SELECT
    r.id AS report_id,
    r.description,
    r.category,
    r.status,
    r.created_at,
    COALESCE(SUM(CASE WHEN v.value = 1 THEN 1 ELSE 0 END), 0) AS upvotes,
    COALESCE(SUM(CASE WHEN v.value = -1 THEN 1 ELSE 0 END), 0) AS downvotes,
    COALESCE(SUM(v.value), 0) AS score
FROM
    public.reports r
LEFT JOIN
    public.votes v ON r.id = v.report_id
GROUP BY
    r.id;

COMMENT ON VIEW public.report_summary IS 'Aggregated view of reports with vote counts and scores.';

-- 7. FUNGSI & TRIGGER UNTUK SINKRONISASI PROFIL

-- Helper function untuk membuat profile saat user baru mendaftar
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.profiles (id, display_name)
  VALUES (new.id, new.email);
  RETURN new;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Trigger yang memanggil fungsi di atas
-- Hapus trigger jika sudah ada sebelum membuatnya kembali
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();

-- 8. FUNGSI RPC (REMOTE PROCEDURE CALL)
-- Fungsi ini untuk mengambil semua laporan dengan skornya, mengatasi masalah relasi cache.
CREATE OR REPLACE FUNCTION get_all_reports_with_scores()
RETURNS TABLE (
    report_id BIGINT,
    description TEXT,
    category public.report_category,
    status public.report_status,
    created_at TIMESTAMPTZ,
    lat DOUBLE PRECISION,
    lng DOUBLE PRECISION,
    end_lat DOUBLE PRECISION,
    end_lng DOUBLE PRECISION,
    upvotes BIGINT,
    downvotes BIGINT,
    score BIGINT
)
AS $$
BEGIN
    RETURN QUERY
    SELECT
        r.id,
        r.description,
        r.category,
        r.status,
        r.created_at,
        r.lat,
        r.lng,
        r.end_lat,
        r.end_lng,
        rs.upvotes,
        rs.downvotes,
        rs.score
    FROM
        public.reports r
    LEFT JOIN
        public.report_summary rs ON r.id = rs.report_id
    ORDER BY
        r.created_at DESC;
END;
$$ LANGUAGE plpgsql;

-- 9. SEED DATA (DATA CONTOH)
-- Catatan: Anda perlu mengganti UUID pengguna dengan UUID yang ada di `auth.users` Anda.
-- Untuk menjalankan ini, buat beberapa user terlebih dahulu di Supabase Auth.

-- Anda bisa menjalankan INSERT di bawah ini secara manual dari SQL Editor di Supabase
-- setelah membuat beberapa user dan mengganti UUID-nya.
/*
-- Contoh Seed Data (Jalankan setelah membuat user)
-- Ganti 'user-uuid-1', 'user-uuid-2', 'user-uuid-3' dengan UUID asli dari tabel auth.users

INSERT INTO public.reports (user_id, category, description, lat, lng)
VALUES
    ('user-uuid-1', 'road', 'Jalan berlubang di dekat perempatan, berbahaya saat malam.', -6.2088, 106.8456),
    ('user-uuid-2', 'crime', 'Terjadi penjambretan tas di area taman kota.', -6.1751, 106.8650),
    ('user-uuid-3', 'lamp', 'Lampu jalan mati total sepanjang 200 meter.', -6.2297, 106.6894),
    ('user-uuid-1', 'flood', 'Banjir setinggi 30cm setelah hujan deras.', -6.2000, 106.8000),
    ('user-uuid-2', 'accident', 'Kecelakaan motor tunggal karena jalan licin.', -6.2146, 106.8451);

-- Contoh votes
INSERT INTO public.votes (report_id, user_id, value)
VALUES
    (1, 'user-uuid-2', 1),
    (1, 'user-uuid-3', 1),
    (2, 'user-uuid-1', -1),
    (3, 'user-uuid-1', 1);
*/

-- CARA APPLY SKEMA INI:
-- 1. Via Supabase Dashboard:
--    - Buka project Supabase Anda.
--    - Pergi ke "SQL Editor".
--    - Salin dan tempel seluruh konten file ini, lalu klik "Run".
-- 2. Via Supabase CLI (Direkomendasikan):
--    - Inisialisasi project: `supabase init`
--    - Hubungkan ke project remote: `supabase login` lalu `supabase link --project-ref <YOUR-PROJECT-ID>`
--    - Buat file migrasi baru: `supabase db reset` (untuk project baru) atau `supabase migration new create_initial_schema`
--    - Salin konten file ini ke dalam file migrasi yang baru dibuat.
--    - Terapkan migrasi: `supabase db push`
